{"version":3,"sources":["../../app-es6/models/Negociacao.js"],"names":["Negociacao","data","quantidade","valor","_quantidade","_valor","_data","Date","getTime","Object","freeze"],"mappings":";;;;;;IAAMA,U;AACF,wBAAYC,IAAZ,EAAkBC,UAAlB,EAA8BC,KAA9B,EAAoC;AAAA;;AAChC;AACA,aAAKC,WAAL,GAAmBF,UAAnB;AACA,aAAKG,MAAL,GAAcF,KAAd;AACA;AACA,aAAKG,KAAL,GAAa,IAAIC,IAAJ,CAASN,KAAKO,OAAL,EAAT,CAAb;;AAEA;AACA;AACAC,eAAOC,MAAP,CAAc,IAAd;AACH;;;;4BAEgB;AACb,mBAAO,KAAKN,WAAZ;AACH;;;4BAEW;AACR,mBAAO,KAAKC,MAAZ;AACH;;;4BAEU;AACP;AACA,mBAAO,IAAIE,IAAJ,CAAS,KAAKD,KAAd,CAAP;AACH;;;4BAEY;AACT,mBAAO,KAAKF,WAAL,GAAmB,KAAKC,MAA/B;AACH","file":"Negociacao.js","sourcesContent":["class Negociacao {\r\n    constructor(data, quantidade, valor){\r\n        // underscore é uma convenção indicando ao progrador que o atributo deve ser imutavel\r\n        this._quantidade = quantidade;\r\n        this._valor = valor;\r\n        // criamos um new Date para previnir que a data seja alterada posteriormente, ou seja, programação defensiva\r\n        this._data = new Date(data.getTime());\r\n\r\n        // torna este objeto imutavel, porem apenas para os atributo quantidade e valor,\r\n        // a data é um objeto portanto devemos usar outras maneiras de deixa-la imutavel pois o freeze é shallow (razo)\r\n        Object.freeze(this);\r\n    }\r\n\r\n    get quantidade() {\r\n        return this._quantidade;\r\n    }\r\n\r\n    get valor() {\r\n        return this._valor;\r\n    }\r\n\r\n    get data() {\r\n        // // criamos um new Date para previnir que a data seja alterada posteriormente, ou seja, programação defensiva\r\n        return new Date(this._data);\r\n    }\r\n\r\n    get volume() {\r\n        return this._quantidade * this._valor;\r\n    }\r\n}"]}