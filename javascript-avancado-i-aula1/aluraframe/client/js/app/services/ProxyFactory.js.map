{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","property","receiver","includes","_ehFuncao","console","log","retorno","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CACKC,M,EAAQC,K,EAAOC,I,EAAK;;AAE9B,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AAMrBI,+BANqB,eAMjBC,MANiB,EAMTC,QANS,EAMCC,QAND,EAMW;AAC7B,oCAAGN,MAAMO,QAAN,CAAeF,QAAf,KAA4BP,aAAaU,SAAb,CAAuBJ,OAAOC,QAAP,CAAvB,CAA/B,EAAwE;AACvE;AACA,2CAAO,YAAU;AACbI,gDAAQC,GAAR,oBAA6BL,QAA7B;;AAEA;AACA;AACA;AACA,4CAAIM,UAAUC,QAAQC,KAAR,CAAcT,OAAOC,QAAP,CAAd,EAAgCD,MAAhC,EAAwCU,SAAxC,CAAd;;AAEAb,6CAAKG,MAAL;;AAEA,+CAAOO,OAAP;AACH,qCAXD;AAYA;AACD,uCAAOC,QAAQT,GAAR,CAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,QAA9B,CAAP;AACF,6BAvBoB;AAyBrBS,+BAzBqB,eAyBjBX,MAzBiB,EAyBTC,QAzBS,EAyBCW,KAzBD,EAyBQV,QAzBR,EAyBiB;;AAElC,oCAAIK,UAAUC,QAAQG,GAAR,CAAYX,MAAZ,EAAoBC,QAApB,EAA8BW,KAA9B,EAAqCV,QAArC,CAAd;AACA,oCAAGN,MAAMO,QAAN,CAAeF,QAAf,CAAH,EAA4B;AACxBD,2CAAOC,QAAP,IAAmBW,KAAnB;AACAf,yCAAKG,MAAL;AACH;AACD,uCAAOO,OAAP;AACH;AAjCoB,yBAAlB,CAAP;AAqCH;;;8CAEgBM,I,EAAK;AAClB,+BAAO,QAAOA,IAAP,yCAAOA,IAAP,cAAuBC,QAAvB,yCAAuBA,QAAvB,EAAP;AACH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory{\r\n    static create(objeto, props, acao){\r\n        \r\n        return new Proxy(objeto, {\r\n            /*\r\n            O target é o objeto real que é encapsulado pela proxy. É este objeto que não queremos \"sujar\" com armadilhas ou qualquer código que não diga respeito ao modelo.\r\n            O prop é a propriedade em si, que está sendo lida naquele momento.\r\n            O receiver é a referência ao próprio proxy. É na configuração do handler do Proxy que colocamos armadilhas.\r\n            */\r\n            get(target, property, receiver) {\r\n               if(props.includes(property) && ProxyFactory._ehFuncao(target[property])){\r\n                // substitui a funcao do proxy (adiciona ou esvazia) por outra que fará o que precisamos\r\n                return function(){\r\n                    console.log(`a propriedade ${property} foi interceptada`);\r\n\r\n                    //Como a função no if, substituirá o método adiciona(), existe um objeto implícito \r\n                    //chamado arguments que dá acesso a todos os parâmetros passados para a função. \r\n                    //A seguir, usaremos o Reflect.apply(), e chamaremos uma função.\r\n                    let retorno = Reflect.apply(target[property], target, arguments);\r\n\r\n                    acao(target);\r\n\r\n                    return retorno;\r\n                };\r\n               }\r\n               return Reflect.get(target, property, receiver);\r\n            },\r\n\r\n            set(target, property, value, receiver){\r\n                \r\n                let retorno = Reflect.set(target, property, value, receiver);\r\n                if(props.includes(property)){\r\n                    target[property] = value;\r\n                    acao(target);\r\n                }\r\n                return retorno;\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    static _ehFuncao(func){\r\n        return typeof(func) == typeof(Function);\r\n    }\r\n}"]}