{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","url","fetch","then","_handleErrors","res","json","ok","Error","statusText","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;4BAEEC,G,EAAI;AAAA;;AACJ;;;;;;AAMQ;;;;;;;AAOR;;;;;;;;;;;;;;;AAgBA;AACA,mBAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,uBAAO,MAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,aADH,EAEFF,IAFE,CAEG;AAAA,uBAAOE,IAAIC,IAAJ,EAAP;AAAA,aAFH,CAAP;AAGH;;;sCAEaD,G,EAAI;AACd,gBAAGA,IAAIE,EAAP,EAAU;AACN,uBAAOF,GAAP;AACH,aAFD,MAEK;AACD,sBAAM,IAAIG,KAAJ,CAAUH,IAAII,UAAd,CAAN;AACH;AACJ;;;6BAEIR,G,EAAKS,I,EAAK;AAAA;;AACX;;;;;;;;;;;;;;;;;;AAkBD,mBAAOR,MAAMD,GAAN,EAAW;AACdU,yBAAS,EAAC,gBAAgB,kBAAjB,EADK;AAEdC,wBAAQ,MAFM;AAGdC,sBAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,aAAX,EAKNP,IALM,CAKD;AAAA,uBAAO,OAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,aALC,CAAP;AAMF","file":"HttpService.js","sourcesContent":["class HttpService {\r\n\r\n    get(url){\r\n        /*\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url);\r\n            xhr.onreadystatechange = () => {\r\n        */\r\n                /*\r\n                    0: requisição ainda não iniciada.\r\n                    1: conexão com o servidor estabelecida.\r\n                    2: requisição recebida.\r\n                    3: processando requisição.\r\n                    4: requisição concluída e a resposta esta pronta.\r\n                */\r\n        /*\r\n                if(xhr.readyState ==4){\r\n                    if(xhr.status == 200){\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    }else{\r\n                        console.log(xhr.responseText);\r\n                        reject('Não foi possível obter as negociações.');\r\n                    }\r\n                }\r\n            };\r\n    \r\n            xhr.send();\r\n        \r\n        });\r\n        */\r\n        \r\n        // recurso fetch do ES 2016\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n    }\r\n\r\n    _handleErrors(res){\r\n        if(res.ok){\r\n            return res;\r\n        }else{\r\n            throw new Error(res.statusText);\r\n        }\r\n    }\r\n\r\n    post(url, dado){\r\n        /*\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('POST', url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n                if(xhr.readyState ==4){\r\n                    if(xhr.status == 200){\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    }else{\r\n                        console.log(xhr.responseText);\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.\r\n        });\r\n        */\r\n       return fetch(url, {\r\n           headers: {'Content-Type': 'application/json'}, \r\n           method: 'post',\r\n           body: JSON.stringify(dado)\r\n       })\r\n       .then(res => this._handleErrors(res));\r\n    }\r\n}"]}