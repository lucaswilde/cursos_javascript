{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AACI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAI;AAC9BC,gCAAQC,GAAR,CAAY,gCAAZ;AACAhB,0CAAkBiB,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAV,gCAAYW,SAAZ,GAAwB,aAAK;AACzBN,gCAAQC,GAAR,CAAY,0CAA0CZ,UAAtD;;AAEA;AACA,4BAAG,CAACA,UAAJ,EAAe;AACXA,yCAAac,EAAEC,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAZD;;AAcAM,gCAAYa,OAAZ,GAAsB,aAAK;AACvBR,gCAAQC,GAAR,CAAY,wBAAZ;AACAP,+BAAOS,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBA1BM,CAAP;AA2BH;AAjCL;AAAA;AAAA,0CAmCyBrB,UAnCzB,EAmCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;;AAEDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAND;AAOH;AA3CL;AAAA;AAAA,8CA6C4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAlDL;;AAAA;AAAA;AAoDH,CA5DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["// O padrão de projeto Module Pattern\r\nvar ConnectionFactory = (function () {\r\n\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n    var connection = null;\r\n    var close = null;\r\n    \r\n    return class ConnectionFactory{\r\n        constructor(){\r\n            throw new Error('Não é possivel criar instâncias de ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = e =>{\r\n                    console.log('getConnection, onupgradeneeded');\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n                \r\n                openRequest.onsuccess = e => {\r\n                    console.log('getConnection, onsuccess: connection=' + connection);\r\n    \r\n                    // se null, cria pega uma nova conexão\r\n                    if(!connection){ \r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Você não pode fechar diretamente a conexão');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n                \r\n                openRequest.onerror = e => {\r\n                    console.log('getConnection, onerror');\r\n                    reject(e.target.error.name);\r\n                }\r\n            });\r\n        }\r\n        \r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n        \r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n}) ();"]}